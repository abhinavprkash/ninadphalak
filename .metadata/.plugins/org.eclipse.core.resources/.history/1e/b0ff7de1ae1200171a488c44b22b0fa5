package stronglyConnectedComponents;

import java.util.ArrayList;
import java.util.HashMap;


public class DFS {
	
	public static int finishingTime;
	public static Node leader;

	public static void depthFirstSearch(Graph graph, Node v) {
	
		dfs(graph, v);
	}
	
	public static dfs_loop(Graph graph){
		finishingTime
	}
	

	private static void modifiedDfs(Graph graph, Node v) {

		// mark v as explored
		if(graph.isExploredMap.get(v) == false){
			System.out.println("Visited Node: " + v.toString());
			//mark v as explored
			graph.isExploredMap.put(v, true);
		}
		// for each edge(v,w), if w is unexplored call dfs on w
		ArrayList<Node> adjNodes = graph.edgeMap.get(v);
		if (adjNodes!=null) {
			for (Node n : adjNodes) {
				if (graph.isExploredMap.get(n) == false) {
					dfs(graph, n);
				}
			}
		}
	}
				
		 
		

	private static void dfs(Graph graph, Node v) {

		// mark v as explored
		if(graph.isExploredMap.get(v) == false){
			System.out.println("Visited Node: " + v.toString());
			//mark v as explored
			graph.isExploredMap.put(v, true);
		}
		// for each edge(v,w), if w is unexplored call dfs on w
		ArrayList<Node> adjNodes = graph.edgeMap.get(v);
		if (adjNodes!=null) {
			for (Node n : adjNodes) {
				if (graph.isExploredMap.get(n) == false) {
					dfs(graph, n);
				}
			}
		}
	}
}
