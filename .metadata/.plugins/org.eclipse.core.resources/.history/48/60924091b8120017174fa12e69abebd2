package stronglyConnectedComponents;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

public class DFS {

	public static int finishingTimeGlobal;
	public static Node leaderGlobal;
	static ArrayList<Node> sortedWithFinishingTime = new ArrayList<Node>();

	public static void depthFirstSearch(Graph graph, Node v) {

		dfs(graph, v);
	}
	
	public void dfsTwoPass(Graph graph, Graph revGraph){
		
	}

	public static void dfsLoop(Graph graph){
		//First Pass
		finishingTimeGlobal = 0;
		leaderGlobal = null;
		graph.resetToUnexplored();
		
		for(Node node : graph.nodeList){
			Boolean isExplored = graph.isExploredMap.get(node);
			 //if node is not yet explored	
			 if(!isExplored){
				 leaderGlobal = node;
				 modifiedDfs(graph,node);
			 }
		}
		//Now we got all the finishing times. Do a second dfs pass with decreasing order of finishing times
		graph.resetToUnexplored();
		for(int j = sortedWithFinishingTime.size()-1; j>=0 ; j--){
			Node n = sortedWithFinishingTime.get(j);
			modifiedDfs(graph,n);
		}
			
	}

	private static void modifiedDfs(Graph graph, Node v) {

		// mark v as explored
		if (graph.isExploredMap.get(v) == false) {
			System.out.println("Visited Node: " + v.toString());
			// mark v as explored
			graph.isExploredMap.put(v, true);
			//set leader(v) = leader
			v.leader = leaderGlobal;
		}
		// for each edge(v,w), if w is unexplored call dfs on w
		ArrayList<Node> adjNodes = graph.edgeMap.get(v);
		if (adjNodes != null) {
			for (Node n : adjNodes) {
				if (graph.isExploredMap.get(n) == false) {
					dfs(graph, n);
				}
			}
		}
		finishingTimeGlobal++;
		v.finishingTime = finishingTimeGlobal;
		sortedWithFinishingTime.add(v);
	}

	private static void dfs(Graph graph, Node v) {

		// mark v as explored
		if (graph.isExploredMap.get(v) == false) {
			System.out.println("Visited Node: " + v.toString());
			// mark v as explored
			graph.isExploredMap.put(v, true);
		}
		// for each edge(v,w), if w is unexplored call dfs on w
		ArrayList<Node> adjNodes = graph.edgeMap.get(v);
		if (adjNodes != null) {
			for (Node n : adjNodes) {
				if (graph.isExploredMap.get(n) == false) {
					dfs(graph, n);
				}
			}
		}
	}
}
