package stronglyConnectedComponents;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class Graph {

	public HashMap<Node, ArrayList<Node>> edgeMap = new HashMap<Node, ArrayList<Node>>();
	public HashMap<Node, Boolean> isExploredMap = new HashMap<Node, Boolean>();
	public Set<Node> nodeList = new HashSet();

	public void addEdge(Integer fromVertex, Integer toVertex, Graph graph) {

		Node fromNode = new Node(fromVertex);
		Node toNode = new Node(toVertex);
		addEdge(fromNode, toNode, graph);
	}

	public void addEdge(Node fromNode, Node toNode, Graph graph) {

		if (graph.edgeMap.containsKey(fromNode)) {
			ArrayList<Node> valueNodes = graph.edgeMap.get(fromNode);
			valueNodes.add(toNode);
			graph.edgeMap.put(fromNode, valueNodes);
			isExploredMap.put(toNode, false);
		} else {
			ArrayList<Node> valueNode = new ArrayList<Node>();
			valueNode.add(toNode);
			graph.edgeMap.put(fromNode, valueNode);
			isExploredMap.put(fromNode, false);
			isExploredMap.put(toNode, false);
		}
	}

	public void resetToUnexplored(){
		Iterator<Map.Entry<Node, Boolean>> iter = isExploredMap.entrySet().iterator();
		while(iter.hasNext()){
			iter.next().setValue(false);
		}
	}
	@Override
	public String toString() {

		StringBuilder result = new StringBuilder();
		for (Entry<Node, ArrayList<Node>> entry : edgeMap.entrySet()) {
			String edge = new String(entry.getKey().toString() + "=>" + entry.getValue().toString() + "\n");
			result.append(edge);
		}
		return result.toString();
	}
}
