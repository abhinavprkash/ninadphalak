package mergesort;

import java.util.Arrays;

public class MergeSort {

	public static void mergesort(int[] numList) {
		internalMergeSort(numList, 0, numList.length);

	}

	private static void internalMergeSort(int[] numList, int leftIndex, int rightIndex) {
		if (leftIndex == rightIndex) {
			return;

		}

		int middleIndex = (leftIndex + rightIndex) / 2;

		internalMergeSort(numList, leftIndex, middleIndex);
		internalMergeSort(numList, middleIndex + 1, rightIndex);
		merge(numList, leftIndex, middleIndex+1 , rightIndex);

	}

	private static void merge(int[] numList, int leftIndex, int middleIndex, int rightIndex) {

		int totalLengthOfMergedArray = rightIndex - leftIndex + 1;

		for (int mergedIndex = 0; mergedIndex < totalLengthOfMergedArray; mergedIndex++) {
			if (numList[leftIndex] < numList[rightIndex] && leftIndex < middleIndex){
				System.out.println(Arrays.toString(numList));
				//System.out.println("leftIndex :" + leftIndex + ", rightIndex: " + rightIndex);
				System.out.println("numList[leftIndex]:" + numList[leftIndex] );
				System.out.println("numList[rightIndex]:" + numList[rightIndex] );
				leftIndex++;

			} else if (numList[rightIndex] < numList[leftIndex] && middleIndex < rightIndex) {
				int temp = numList[leftIndex];
				numList[leftIndex] = numList[rightIndex];
				numList[rightIndex] = temp;
				middleIndex++;
			}
		}
	}
}
