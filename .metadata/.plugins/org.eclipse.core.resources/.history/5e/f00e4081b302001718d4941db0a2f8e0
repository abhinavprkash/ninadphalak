package quicksort;

public class Quicksort {

	public static int sort(int[] numbers, int startIndex, int endIndex) {

		int numOfComparisons = sort(numbers, startIndex, endIndex, 0);
		return numOfComparisons;
	}

	public static int sort(int[] numbers, int startIndex, int endIndex, int numOfComparisons) {

		if (startIndex < endIndex) {
			int pivotIndex = partition(numbers, startIndex, endIndex);
			numOfComparisons = numOfComparisons + (endIndex - startIndex - 1);
			sort(numbers, startIndex, pivotIndex, numOfComparisons);
			sort(numbers, pivotIndex + 1, endIndex, numOfComparisons);
		}
		//System.out.println("numOfComparisons***: "  + numOfComparisons);
		return numOfComparisons;
	}

	private static int partition(int[] numbers, int startIndex, int endIndex) {

		int pivot = numbers[startIndex];
		int i = startIndex + 1;
		for (int j = startIndex + 1; j < endIndex; j++) {
			if (numbers[j] < pivot) {// else numbers[j]>pivot so just increment
										// j // j
				// swap numbers[j] with leftmost element of right(greater than
				// pivot) array
				int temp = numbers[i];
				numbers[i] = numbers[j];
				numbers[j] = temp;
				i++;
			}
		}
		// swap numbers[startIndex wihttp://community.jaspersoft.com/project/jaspersoft-dockerth rightmost element of left(less than
		// pivot) array
		int temp = pivot;
		numbers[startIndex] = numbers[i - 1];
		numbers[i - 1] = temp;
		return i - 1;
	}
}
