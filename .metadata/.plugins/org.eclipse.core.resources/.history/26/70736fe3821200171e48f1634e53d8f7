package stronglyConnectedComponents;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;

public class Graph {
	 public HashMap<Node,ArrayList<Node>> edgeMap = new HashMap<Node,ArrayList<Node>>();
	

	public void addEdge(Integer fromVertex, Integer toVertex, Graph graph){
		Node fromNode = new Node(fromVertex);
		Node toNode  = new Node(toVertex);
		addEdge(fromNode, toNode, graph);
	}
	
	public void addEdge(Node fromNode, Node toNode, Graph graph){
		if(graph.edgeMap.containsKey(fromNode)){
			ArrayList<Node> valueNodes = graph.edgeMap.get(fromNode);
			valueNodes.add(toNode);
			graph.edgeMap.put(fromNode, valueNodes);
		}else{
			ArrayList<Node> valueNode = new ArrayList<Node>();
			valueNode.add(toNode);
			graph.edgeMap.put(fromNode,valueNode);
		}
	}
	
	public void resetNodesUnexplored(Graph g){
		Iterator <Map.Entry<Node,ArrayList<Node>>> iter = g.edgeMap.entrySet().iterator();
		while(iter.hasNext()){
			Map.Entry<Node, ArrayList<Node>> entry = iter.next();
			Node keyNode = entry.getKey();
			keyNode.markUnexplored();
			//Mark all values also as unexplored
			ArrayList<Node> adjNodes = entry.getValue();
			for(Node node : adjNodes){
				node.markUnexplored();
			}
			g.edgeMap.put(keyNode,adjNodes);
		}
	}
	
	@Override
	public String toString() {

		StringBuilder result = new StringBuilder();
		for (Entry<Node, ArrayList<Node>> entry : edgeMap.entrySet()) {
			String edge = new String(entry.getKey().toString() + "=>" + entry.getValue().toString() + "\n");
			result.append(edge);
		}
		return result.toString();
	}
}
