package stronglyConnectedComponents;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map.Entry;

import kargerMinCut.Node;

public class Graph {
	HashMap<Node,ArrayList<Node>> map = new HashMap<Node,ArrayList<Node>>();
	
	
	public HashMap<Node, ArrayList<Node>> getMap() {
	
		return map;
	}

	
	public void setMap(HashMap<Node, ArrayList<Node>> map) {
	
		this.map = map;
	}

	public void addEdge(Integer fromVertex, Integer toVertex, Graph graph){
		Node fromNode = new Node(fromVertex);
		Node toNode  = new Node(toVertex);
		addEdge(fromNode, toNode, graph);
	}
	
	public void addEdge(Node fromNode, Node toNode, Graph graph){
		if(graph.map.containsKey(fromNode)){
			ArrayList<Node> valueNodes = graph.map.get(fromNode);
			valueNodes.add(toNode);
			graph.map.put(fromNode, valueNodes);
		}else{
			ArrayList<Node> valueNode = new ArrayList<Node>();
			valueNode.add(toNode);
			graph.map.put(fromNode,valueNode);
		}
	}
	
	@Override
	public String toString() {

		StringBuilder result = new StringBuilder();
		for (Entry<Node, ArrayList<Node>> entry : map.entrySet()) {
			String edge = new String(entry.getKey().toString() + "=>" + entry.getValue().toString() + "\n");
			result.append(edge);
		}
		return result.toString();
	}
}
